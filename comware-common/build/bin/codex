#!/bin/bash

# Get configuration from environment variables, use defaults as fallback
PROJECT_PLATFORM_PATH=${PROJECT_PLATFORM_PATH:-""}  # This should be set automatically
PROJECT_PUBLIC_PATH=${PROJECT_PUBLIC_PATH:-""}      # This should be set automatically

# shellcheck source=/dev/null
source "log-utils"
# shellcheck source=/dev/null
source "jenkins-utils"
# shellcheck source=/dev/null
source "svn-utils"

# Error handling function
handle_error() {
    log_error "$1"
    # Also return error info in JSON format, ensuring meaningful output even when stderr is redirected
    echo "{\"result\":-2,\"report_url\":\"\",\"console_output_url\":\"\",\"error_info\":[{\"FILE\":\"\",\"LINENUMBER\":0,\"ALARM\":\"$1\"}]}"
}

# Get build information
get_build_result() {
    local build_number="$1"
    local task_name="$2"

    # Get build info and console output
    local build_info
    if ! build_info=$(curl -s --fail --user "${JENKINS_USERNAME}:${JENKINS_API_TOKEN}" "${JENKINS_SERVER_URL}/job/${task_name}/${build_number}/api/json"); then
        log_error "Failed to get build info for job ${task_name} #${build_number}"
        echo "{\"result\":-3,\"report_url\":\"\",\"console_output_url\":\"\",\"error_info\":[]}"
        return 1
    fi
    if [ -z "$build_info" ]; then
        log_error "Empty build info received for job ${task_name} #${build_number}"
        echo "{\"result\":-3,\"report_url\":\"\",\"console_output_url\":\"\",\"error_info\":[]}"
        return 1
    fi

    # Get build URL
    local build_url
    build_url=$(echo "$build_info" | jq -r '.url')
    if [ -z "$build_url" ] || [ "$build_url" = "null" ]; then
        log_error "Invalid build URL retrieved for job ${task_name} #${build_number}"
        echo "{\"result\":-3,\"report_url\":\"\",\"console_output_url\":\"\",\"error_info\":[]}"
        return 1
    fi

    # Get console output
    # local console_output
    # console_output=$(curl -s --fail --user "${JENKINS_USERNAME}:${JENKINS_API_TOKEN}" "${build_url}consoleText")

    # Initialize result variables
    local result
    local error_info="[]"

    # Get build result
    local build_result
    build_result=$(echo "$build_info" | jq -r '.result')
    if [ "$build_result" = "SUCCESS" ]; then
        log_info "Build #${build_number} succeeded"
        result=0
    elif [ "$build_result" = "FAILURE" ]; then
        log_error "Build #${build_number} failed"
        result=-1
    elif [ "$build_result" = "ABORTED" ]; then
        log_info "Build #${build_number} was aborted"
        result=-2
    else
        log_error "Build #${build_number} is in an unknown state: ${build_result}"
        result=-3
    fi

    local report_url="${build_url}report/codex__add_report.html"
    log_info "CodeX report URL: ${report_url}"

    # Build JSON result
    echo "{\"result\":${result},\"report_url\":\"${report_url}\",\"console_output_url\":\"${build_url}console\",\"error_info\":${error_info}}"
}

get_changed_modules() {
    local -A module_set
    for file_path in $(svn_s status "$PROJECT_PLATFORM_PATH" | grep -E "^[ADM]|^MM" | awk '{print $2}'); do
        local minor_module=${file_path#*/src/sbin/}
        minor_module=${minor_module%%/*}
        if [[ -z "$minor_module" ]]; then
            minor_module=${file_path#*/src/kernel/}
            minor_module=${minor_module%%/*}
        fi
        if [[ -n "$minor_module" ]] && [[ -z "${module_set[$minor_module]}" ]]; then
            module_set[$minor_module]=1
        fi
    done

    # Convert associative array to a comma-separated list
    local module_list
    module_list=$(
        IFS=,
        echo "${!module_set[*]}"
    )
    echo "$module_list"
}

# Execute build job
build_job_codex() {
    local module_list="$1"
    local svn_path="$2"
    local extra_params="$3"

    # Get Jenkins crumb
    local jenkins_crumb
    jenkins_crumb=$(jenkins_get_crumb)
    if [ -z "$jenkins_crumb" ]; then
        handle_error "Failed to get Jenkins crumb"
        return 1
    fi

    # Determine task name
    local task_name
    if [[ "$svn_path" == *"V9R1"* ]]; then
        task_name="V9CodeXV2"
    else
        task_name="CodeXV2"
    fi

    # Construct build command
    local build_cmd="-s ${svn_path}"
    [ -n "$module_list" ] && build_cmd="${build_cmd} -f ${module_list}"
    [ -n "$extra_params" ] && build_cmd="${build_cmd} ${extra_params}"
    log_info "Starting ${task_name}:\n- Repo: ${svn_path}\n- Modules: ${module_list}\n- User: ${SVN_USERNAME}"
    log_debug "Build command: ${build_cmd}"

    # Trigger Jenkins build
    if ! curl -s -X POST --user "${JENKINS_USERNAME}:${JENKINS_API_TOKEN}" -H "Jenkins-Crumb: ${jenkins_crumb}" \
        "${JENKINS_SERVER_URL}/job/${task_name}/buildWithParameters" \
        --data-urlencode "BuildCmd=${build_cmd}" \
        --data-urlencode "FAKE_USER=${SVN_USERNAME}" >/dev/null; then
        handle_error "Failed to trigger Jenkins build"
        return 1
    fi

    # Get build number
    local abuild_number
    abuild_number=$(jenkins_get_job_number "$task_name" "$build_cmd")
    if [ -z "$abuild_number" ] || [ "$abuild_number" = "-1" ]; then
        handle_error "Build was cancelled or failed to get build number"
        return 1
    fi

    # Monitor build results
    if ! jenkins_monitor_job_progress "$task_name" "$abuild_number"; then
        handle_error "Build monitoring failed"
        return $?
    fi

    # Get build result
    get_build_result "$abuild_number" "$task_name"
}

# Display help information
show_help() {
    echo "Usage: codex [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help information"
    echo "  -f, --folders <list>    Override auto detected submodule folders,"
    echo "                          Comma-separated list of submodule folders to build, e.g. 'module1,module2'"
    echo "  -s, --svn-path <path>   Override auto detected SVN path,"
    echo "                          e.g. 'cmwcode-open/branches/branch_name'"
    echo "  [extra_params]          Additional parameters to forward to the codex job"
    echo ""
    echo "Configurable Environment Variables:"
    echo "  Current script:"
    echo "    PROJECT_PLATFORM_PATH     Project platform folder path, this should be set automatically"
    echo "    PROJECT_PUBLIC_PATH       Project public folder path, this should be set automatically"
    echo ""
    echo "  Inherited from jenkins-utils:"
    echo "    JENKINS_API_TOKEN     Jenkins API token, default is 117b0fdde578a988ec1be741dd777c1a1c"
    echo "    JENKINS_SERVER_URL    Jenkins server URL, default is http://10.153.3.174:8080"
    echo "    JENKINS_TIMEOUT       Jenkins waiting timeout in seconds, default is 600"
    echo "    JENKINS_USERNAME      Jenkins API username, default is h25380"
    echo ""
    echo "  Inherited from log-utils:"
    echo "    LOG_LEVEL             Log level, 0=error, 1=info, 2=debug, default is 1"
    echo ""
    echo "  Inherited from svn-utils:"
    echo "    SVN_PASSWORD          SVN password, this should be set automatically"
    echo "    SVN_USERNAME          SVN username, this should be set automatically"
}

# Main function
main() {
    local module_list
    local svn_path
    local extra_params

    while [ $# -gt 0 ]; do
        case $1 in
        -f | --folders)
            module_list="$2"
            shift
            shift
            ;;
        -h | --help)
            show_help
            exit 0
            ;;
        -s | --svn-path)
            svn_path="$2"
            shift
            shift
            ;;
        *)
            extra_params="$extra_params $1"
            shift
            ;;
        esac
    done

    if [ -z "$PROJECT_PLATFORM_PATH" ]; then
        log_error "PROJECT_PLATFORM_PATH is not set, please set it before running this script."
        exit 1
    fi

    if [ -z "$module_list" ]; then
        # Get changed modules
        module_list=$(get_changed_modules)
        if [ -z "$module_list" ]; then
            handle_error "No changed modules found, cannot proceed."
            return 1
        fi
    fi

    if [ -z "$svn_path" ]; then
        # Creating shadow branch
        log_info "Creating shadow branch for project platform folder: ${PROJECT_PLATFORM_PATH}"
        local shadow_branch_url
        shadow_branch_url=$(shadow-branch -f "$PROJECT_PLATFORM_PATH")
        # TODO: Support other platforms, currently only cmwcode-open is supported
        if [[ "$shadow_branch_url" != *"cmwcode-open"* ]]; then
            handle_error "Invalid shadow branch url, this may be caused by an incorrect PROJECT_PLATFORM_PATH."
            return 1
        fi
        log_info "Creating shadow branch for project public folder: ${PROJECT_PUBLIC_PATH}"
        shadow-branch -f "$PROJECT_PUBLIC_PATH"

        svn_path=${shadow_branch_url#*cmwcode-open}
        log_debug "Found cmwcode-open in SVN path, extracted path: $svn_path"
    fi

    build_job_codex "$module_list" "$svn_path" "$extra_params"
    local build_result=$?

    # Delete shadow branch
    shadow-branch -r "$PROJECT_PLATFORM_PATH"
    shadow-branch -r "$PROJECT_PUBLIC_PATH"

    return $build_result
}

# Execute main function
main "$@"
