#!/bin/bash

# Get configuration from environment variables, use defaults as fallback
LOG_INDENT=${LOG_INDENT:-0} # Indentation level for log messages
LOG_LEVEL=${LOG_LEVEL:-2}   # 0=error, 1=warning, 2=info, 3=debug

# Check if running in Coder environment or terminal
if [ -n "$CODER" ] || [ -t 1 ]; then
    COLOR_CYAN=$(echo -e "\033[36m")
    COLOR_GREEN=$(echo -e "\033[32m")
    COLOR_RED=$(echo -e "\033[31m")
    COLOR_RESET=$(echo -e "\033[0m")
    COLOR_YELLOW=$(echo -e "\033[33m")
fi

# Track if the previous log output used the -n flag
LOG_PREVIOUS_NO_NEW_LOG=false

# Log processing function - supports line breaks and indentation, connecting multiple lines
log_message() {
    local level="$1"
    local no_new_log="$2"
    shift 2 # Remove level and no_new_log from parameters

    local indent="${LOG_INDENT:-0}"

    # Create indentation string
    local indent_str
    if [ "$indent" -gt 0 ]; then
        indent_str=$(printf "%${indent}s" "")
    fi

    # Create prefix for continuation lines, aligned with the first line level
    local continuation_prefix
    continuation_prefix=$(printf "%$((${#level} - 1))s|" "")

    # Process each line of the message, preserving line breaks
    local is_first_line=true
    echo -e "$*" | while IFS= read -r line || [ -n "$line" ]; do
        if [ "$is_first_line" = true ]; then
            if [ "$no_new_log" = true ]; then
                if [ "$LOG_PREVIOUS_NO_NEW_LOG" = false ]; then
                    printf "%s %s" "$level" "$indent_str" >&2
                fi
                printf "%s" "$line" >&2
            else
                if [ "$LOG_PREVIOUS_NO_NEW_LOG" = true ]; then
                    printf "\n" >&2
                fi
                printf "%s %s%s\n" "$level" "$indent_str" "$line" >&2
            fi
            is_first_line=false
        else
            # Subsequent lines use connecting lines and maintain the same indentation as the first line
            if [ "$no_new_log" = true ]; then
                if [ -n "$line" ]; then
                    printf "\n%s %s%s" "$continuation_prefix" "$indent_str" "$line" >&2
                fi
            else
                printf "%s %s%s\n" "$continuation_prefix" "$indent_str" "$line" >&2
            fi
        fi
    done

    # Record the status of this log for next log output decision
    LOG_PREVIOUS_NO_NEW_LOG=$no_new_log
}
# Increase/decrease indentation level
log_indent_increase() {
    LOG_INDENT=$(("$LOG_INDENT" + 2))
}
log_indent_decrease() {
    LOG_INDENT=$(("$LOG_INDENT" > 2 ? "$LOG_INDENT" - 2 : 0))
}
# Log functions - redirect all output to stderr to avoid interfering with function return values
# Define log output functions, supporting different levels
log_message_by_level() {
    local level=$1
    local min_level=$2
    local no_new_log=$3
    shift 3 # Remove level, min_level, and no_new_log from parameters

    [ "$LOG_LEVEL" -ge "$min_level" ] && log_message "$level" "$no_new_log" "$@"
}
log_error() { log_message_by_level "[Error]" 0 false "$@"; }
log_warn() { log_message_by_level "[Warn]" 1 false "$@"; }
log_info() { log_message_by_level "[Info]" 2 false "$@"; }
log_debug() { log_message_by_level "[Debug]" 3 false "$@"; }

log_info_n() { log_message_by_level "[Info]" 2 true "$@"; }
log_debug_n() { log_message_by_level "[Debug]" 3 true "$@"; }
