.. _topics-附加功能:


附加功能
================
本节主要介绍pyPilot框架提供给用户可选的扩展功能


----------------
自定义附加测试
----------------
此模式功能为提供给用户需要在脚本特定位置执行附加操作，比如说用户需要在每个步骤执行间增加主备倒换操作。

目前VTP-CLOUD提供了功能区即可采用勾选配置的方式实现，位置如下：

.. image:: ./images/附加功能设置.png



此功能提供代码执行的位置包括：脚本执行前后，脚本执行间，用例步骤前后，步骤间。

可执行的操作有如下几种：

1）框架设备类对象提供的所有操作，包括重启、主备倒换等；

2）对设备下发指定命令行；

3）脚本的conftest.py文件中提供了两个函数 ``pre_func`` 和 ``post_func`` ，用户可在这两个函数中自定义需要执行的代码；


**执行设置举例**：

1）在 **脚本间** ，所有设备额外执行重启操作

.. image:: ./images/脚本间设备重启.png

2）在 **脚本执行前后**，所有设备下发命令行 dis inter brief

.. image:: ./images/脚本间自定义执行.png

3）在 **步骤前后**，执行用户在conftest.py中自定义函数 pre_func 和 post_func

.. image:: ./images/步骤前后自定义执行.png



.. note:: conftest.py文件中的 pre_func 和 post_func 函数名不能更改，装饰器不能删除，同时需要在脚本中使用命令行 from .conftest import pre_func, post_func 显示引用


----------------
自定义附加检查
----------------
为了更加测试深度，框架为用户提供了多种附加检查，主动检查脚本执行前后的设备的信息或状态变化(如配置未清除检查、core文件检查、kernel信息检查)，用户可以根据实际情况选择是否进行这类检查。

VTP-CLOUD提供了功能区，采用勾选配置的方式进行设置，位置如下：

.. image:: ./images/附加检查设置.png


提供的附加检查功能介绍：
    - 配置未清除检查：对比脚本执行前后各设备的display current信息，并记录配置差异。
    - core文件检查：对比脚本执行后各设备主控板中的core文件，并记录增加的core文件名称。如有新增core文件，脚本结果设置为NG。
    - kernel信息检查：对比脚本执行前后各设备的最新2条kernel信息，覆盖 ``exception、deadloop、starvation`` 3种类型，并记录新生成的2条kernel信息。如有新增kernel信息，脚本结果设置为NG。
    - bashlog检查：对比脚本执行后各设备的 ``/var/log`` 目录中的日志，当数量或大小超过用户设置，记录新增日志文件名称，以及超过设置大小的日志文件名称。该检查要求设备安装devkit特性包。
    - 生成内存使用率信息：每个脚本执行后，通过命令行 ``display memory summary`` 获取内存使用率的汇总信息并生成文件，日志中打开该文件。
    - 生成诊断信息：整个拓扑的脚本执行完成后，通过命令行 ``display diagnostic-information`` 保存设备的诊断信息，日志中记录诊断文件的名称。
    
