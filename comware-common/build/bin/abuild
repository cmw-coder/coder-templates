#!/bin/bash

# 从环境变量获取配置，使用默认值作为后备
TIMEOUT=${TIMEOUT:-300}  # 默认等待超时时间（秒）
LOG_LEVEL=${LOG_LEVEL:-1}  # 0=错误, 1=信息, 2=调试
JENKINS_SERVER_URL=${JENKINS_SERVER_URL:-"http://10.153.3.174:8080"}
JENKINS_USERNAME=${JENKINS_USERNAME:-"h25380"}
JENKINS_API_TOKEN=${JENKINS_API_TOKEN:-"117b0fdde578a988ec1be741dd777c1a1c"}

JENKINS_AUTH="${JENKINS_USERNAME}:${JENKINS_API_TOKEN}"

# 跟踪上一次日志输出是否使用了-n标志
PREVIOUS_LOG_NONEWLINE=false
PREVIOUS_LOG_LEVEL=""

# 日志处理函数 - 支持换行和缩进，使用线条连接多行
log_message() {
  local level="$1"
  local nonewline=false
  shift
  
  # 检查是否需要不添加换行符
  if [ "$1" = "-n" ]; then
    nonewline=true
    shift
  fi
  
  local indent="${LOG_INDENT:-0}"
  local indent_str=""
  local level_length=${#level}
  local continuation_prefix
  local is_first_line=true
  local skip_prefix=false
  
  # 创建缩进字符串
  if [ "$indent" -gt 0 ]; then
    indent_str=$(printf "%${indent}s" "")
  fi
  
  # 创建后续行的前缀，与第一行级别对齐
  continuation_prefix=$(printf "%$((level_length-1))s|" "")
  
  # 判断是否跳过前缀（如果上一次输出使用了-n并且等级相同）
  if [ "$PREVIOUS_LOG_NONEWLINE" = true ] && [ "$PREVIOUS_LOG_LEVEL" = "$level" ]; then
    skip_prefix=true
  fi
  
  # 处理每行消息，保留换行符
  echo -e "$*" | while IFS= read -r line || [ -n "$line" ]; do
    if [ "$is_first_line" = true ]; then
      # 第一行使用正常的级别前缀或跳过前缀
      if [ "$skip_prefix" = true ]; then
        # 如果上一次是-n并且日志级别相同，则直接输出，不添加前缀
        printf "%s" "$line" >&2
      elif [ "$nonewline" = true ]; then
        printf "%s %s%s" "$level" "$indent_str" "$line" >&2
      else
        printf "%s %s%s\n" "$level" "$indent_str" "$line" >&2
      fi
      is_first_line=false
    else
      # 后续行使用连接线，并保持与第一行相同的缩进
      if [ "$nonewline" = true ] && [ -z "$line" ]; then
        # 不输出任何内容
        :
      elif [ "$nonewline" = true ]; then
        printf "\n%s %s%s" "$continuation_prefix" "$indent_str" "$line" >&2
      else
        printf "%s %s%s\n" "$continuation_prefix" "$indent_str" "$line" >&2
      fi
    fi
  done
  
  # 记录本次日志的状态，用于下一次日志输出判断
  PREVIOUS_LOG_NONEWLINE=$nonewline
  PREVIOUS_LOG_LEVEL=$level
}

# 增加/减少缩进级别
log_indent_increase() { export LOG_INDENT=$((${LOG_INDENT:-0} + 2)); }
log_indent_decrease() { 
  if [ "${LOG_INDENT:-0}" -ge 2 ]; then
    export LOG_INDENT=$((LOG_INDENT - 2))
  else
    export LOG_INDENT=0
  fi
}

# 日志函数 - 将所有输出重定向到stderr以避免干扰函数返回值
log_error() { log_message "[Error]" "$@"; }
log_info() { [ "$LOG_LEVEL" -ge 1 ] && log_message "[Info]" "$@"; }
log_debug() { [ "$LOG_LEVEL" -ge 2 ] && log_message "[Debug]" "$@"; }
# 不带换行符的日志函数
log_info_n() { [ "$LOG_LEVEL" -ge 1 ] && log_message "[Info]" -n "$@"; }
log_debug_n() { [ "$LOG_LEVEL" -ge 2 ] && log_message "[Debug]" -n "$@"; }

# 错误处理函数
handle_error() {
  log_error "$1"
  return 1
}

# 获取Jenkins Crumb以防止CSRF保护
get_jenkins_crumb() {
  curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/crumbIssuer/api/json" | jq -r '.crumb'
}

# 获取构建编号，添加超时控制
get_build_number() {
  local task_name=$1
  local build_cmd=$2
  local start_time
  start_time=$(date +%s)
  
  log_info "Looking for build number for task: ${task_name}"
  log_debug "Build command: ${build_cmd}"
  
  # 等待队列中的任务开始运行
  while true; do
    # 检查超时
    local current_time
    current_time=$(date +%s)
    if [ $((current_time - start_time)) -gt "$TIMEOUT" ]; then
      log_error "Timeout waiting for build to start after ${TIMEOUT} seconds"
      echo "-1"
      return 1
    fi
    
    local queue_info
    queue_info=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/queue/api/json")
    
    # 检查是否存在匹配的任务
    if echo "$queue_info" | jq -e '.items[] | select(.task.name == "'"$task_name"'") | 
      (.actions[0].parameters[0].value == "'"$build_cmd"'" and .actions[1].causes[0].userId == "'"$JENKINS_USERNAME"'") or
      (.actions[1].parameters[0].value == "'"$build_cmd"'" and .actions[0].causes[0].userId == "'"$JENKINS_USERNAME"'")' > /dev/null; then
      log_info "Matching task found in queue, waiting for it to start..."
      sleep 3
      continue
    fi
    
    log_info "Task not found in queue or has started running"
    break
  done
  
  # 获取最新构建号
  local next_build_number
  next_build_number=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/api/json" | jq '.nextBuildNumber - 1')
  log_info "Latest build number for ${task_name}: ${next_build_number}"
  
  # 查找匹配的构建
  local i=0
  log_debug "Checking recent builds for matching command and user..."
  while [ "$next_build_number" -gt 0 ] && [ $i -lt 10 ]; do
    log_debug "Checking build #${next_build_number}"
    local job_info
    job_info=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${next_build_number}/api/json")
    
    # 处理可能的两种参数顺序
    if echo "$job_info" | jq -e '(.actions[0].parameters[0].value == "'"$build_cmd"'" and .actions[1].causes[0].userId == "'"$JENKINS_USERNAME"'") or
        (.actions[1].parameters[0].value == "'"$build_cmd"'" and .actions[0].causes[0].userId == "'"$JENKINS_USERNAME"'")' > /dev/null; then
      log_info "Found matching build: #${next_build_number}"
      echo "$next_build_number"
      return 0
    fi
    
    next_build_number=$((next_build_number - 1))
    i=$((i + 1))
  done
  
  log_error "Failed to find matching build after checking ${i} builds"
  echo "-1"
  return 1
}

# 从构建控制台输出中提取版本路径
get_version_path() {
  local task_name="$1"
  local console_output="$2"
  
  # 查找Build.html路径
  local version_path_prefix
  version_path_prefix=$(echo "$console_output" | grep -E '^\s*.*Build\.html' | head -1 | 
                       sed -E 's/^\s*(.*Build\.html).*/\1/' | 
                       sed 's/\\Build.html$//' | 
                       sed 's/\\/\//g')
  
  if [ -z "$version_path_prefix" ]; then
    log_debug "No Build.html path found in console output"
    echo ""
    return 0
  fi
  
  local last_path_name
  last_path_name=$(echo "$version_path_prefix" | awk -F/ '{print $NF}')
  local version_file_path=""
  
  # 根据任务类型查找相应的文件路径
  if [ "$task_name" = "V9ABUILD_CI" ]; then
    version_file_path=$(echo "$console_output" | grep -E "${last_path_name}.*TARGET.*\.tar\.gz" | head -1 |
                       sed -E "s/.*($last_path_name\/TARGET\/.*)/\1/")
  else
    version_file_path=$(echo "$console_output" | grep -E "${last_path_name}.*TARGET.*\.ipe" | head -1 |
                       sed -E "s/.*($last_path_name\/TARGET\/.*\.ipe\/)/\1/")
  fi
  
  # 返回完整版本路径
  if [ -n "$version_file_path" ]; then
    echo "file:${version_path_prefix}/${version_file_path}"
  else
    log_debug "No version file path found in console output"
    echo ""
  fi
}

# 获取构建错误信息
get_build_result() {
  local build_number="$1"
  local task_name="$2"
  
  # 获取构建信息和控制台输出
  local build_url=""
  local build_info
  
  if ! build_info=$(curl -s --fail --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${build_number}/api/json"); then
    log_error "Failed to get build info for job ${task_name} #${build_number}"
    echo "{\"result\":-1,\"version_path\":\"\",\"build_info_output\":\"\",\"error_info\":[]}"
    return 1
  fi
  
  if [ -z "$build_info" ]; then
    log_error "Empty build info received for job ${task_name} #${build_number}"
    echo "{\"result\":-1,\"version_path\":\"\",\"build_info_output\":\"\",\"error_info\":[]}"
    return 1
  fi
  
  build_url=$(echo "$build_info" | jq -r '.url')
  if [ -z "$build_url" ] || [ "$build_url" = "null" ]; then
    log_error "Invalid build URL retrieved for job ${task_name} #${build_number}"
    echo "{\"result\":-1,\"version_path\":\"\",\"build_info_output\":\"\",\"error_info\":[]}"
    return 1
  fi
  
  local console_output
  console_output=$(curl -s --fail --user "${JENKINS_AUTH}" "${build_url}consoleText")
  # 删除未使用的变量
  
  local job_status
  job_status=$(echo "$build_info" | jq -r '.result')
  
  # 初始化结果变量
  local ret=0
  local version_path=""
  local error_info="[]"
  
  if [ "$job_status" = "SUCCESS" ]; then
    version_path=$(get_version_path "$task_name" "$console_output")
  else
    ret=-1
    # 提取错误信息
    local error_list
    error_list=$(echo "$console_output" | grep -E '^(.*):([0-9]+):\s*(error:|undefined reference|fatal error:)(.*)$')
    
    if [ -n "$error_list" ]; then
      # 计算唯一的错误文件数量
      local unique_files=()
      while IFS= read -r line; do
        local file
        file=$(echo "$line" | sed -E 's/^([^:]+):([0-9]+):.*/\1/')
        [[ "$file" == *":"* ]] && file=${file%:*}
        unique_files+=("$file")
      done <<< "$error_list"
      
      mapfile -t unique_files < <(printf "%s\n" "${unique_files[@]}" | sort -u)
      
      # 如果错误文件不超过5个，格式化错误信息
      if [ ${#unique_files[@]} -le 5 ]; then
        error_info="["
        local first=true
        
        while IFS= read -r line; do
          local file
          local line_num
          file=$(echo "$line" | sed -E 's/^([^:]+):([0-9]+):.*/\1/')
          line_num=$(echo "$line" | sed -E 's/^([^:]+):([0-9]+):.*/\2/')
          
          [[ "$file" == *":"* ]] && { line_num=${file##*:}; file=${file%:*}; }
          
          $first || error_info="${error_info},"
          first=false
          error_info="${error_info}{\"FILE\":\"${file}\",\"LINENUMBER\":${line_num},\"ALARM\":\"${line}\"}"
        done <<< "$error_list"
        
        error_info="${error_info}]"
      fi
    fi
  fi
  
  # 构建JSON结果
  echo "{\"result\":${ret},\"version_path\":\"${version_path}\",\"build_info_output\":\"${build_url}console\",\"error_info\":${error_info}}"
}

# 监控构建结果
monitor_build_progress() {
  local task_name="$1"
  local build_number="$2"
  
  if [ "$build_number" = "-1" ]; then
    log_error "Build canceled or not found"
    return 1
  fi
  
  local start_time
  start_time=$(date +"%Y%m%d.%H%M%S")
  
  local timestamp_seconds
  timestamp_seconds=$(date -d "$start_time" +%s 2>/dev/null || date +%s)
  
  local build_url
  build_url=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${build_number}/api/json" | jq -r '.url')
  
  log_info "Build #${build_number} started at ${start_time}"
  log_info "Build console URL: ${build_url}console"
  
  # 等待构建完成，添加超时检查
  local wait_time=0
  local job_status="null"
  log_info_n "Waiting for build to complete "
  
  while [ "$job_status" = "null" ] && [ "$wait_time" -lt "$TIMEOUT" ]; do
    sleep 3
    wait_time=$((wait_time + 3))
    job_status=$(curl -s --user "${JENKINS_AUTH}" "${build_url}/api/json" | jq -r '.result')
    log_info_n "."
  done
  log_info ""  # 仅添加一个换行符
  
  if [ "$wait_time" -ge "$TIMEOUT" ]; then
    log_error "Build timed out after ${TIMEOUT} seconds"
    return 2
  fi
  
  local end_time
  end_time=$(date +"%Y%m%d.%H%M%S")
  
  local end_seconds
  end_seconds=$(date -d "$end_time" +%s 2>/dev/null || date +%s)
  
  local duration=$((end_seconds - timestamp_seconds))
  
  log_info "Build completed at: ${end_time} (${duration}s)"
  log_info "Build result: ${job_status}"

  return 0
}

# 执行构建作业
build_job_compile() {
  local svn_url="$1"
  local ipe_package_name="$2"
  local module_list="$3"
  local user_number=${4:-"$JENKINS_USERNAME"}
  local timestamp="$5"
  local lib_path="$6"
  local version_type=${7:-"release"}
  
  # 确定任务名称
  local task_name
  if [[ "$svn_url" == *"V9R1"* ]]; then
    task_name="V9ABUILD"
  else
    task_name="ABUILD"
  fi
  
  # 构建命令
  local build_cmd="-e ${ipe_package_name} -s ${svn_url}"
  [ -n "$module_list" ] && build_cmd="${build_cmd}:${module_list}"
  [ "${version_type,,}" != "debug" ] && build_cmd="${build_cmd} -r"
  [ -n "$lib_path" ] && build_cmd="${build_cmd} -i ${lib_path}"
  [ -n "$timestamp" ] && build_cmd="${build_cmd} -v ${timestamp} -uk"
  
  log_info "Starting ${task_name}:\n- Packages: ${ipe_package_name}\n- Repo: ${svn_url}\n- Modules: ${module_list}\n- Type: ${version_type}\n- Lib path: ${lib_path}\n- User: ${user_number}"
  log_debug "Build command: ${build_cmd}"
  
  # 获取CSRF令牌
  local crumb
  crumb=$(get_jenkins_crumb)
  [ -z "$crumb" ] && return "$(handle_error "Failed to get Jenkins crumb")"
  
  # 触发Jenkins构建
  curl -s -X POST --user "${JENKINS_AUTH}" -H "Jenkins-Crumb: ${crumb}" \
    "${JENKINS_SERVER_URL}/job/${task_name}/buildWithParameters" \
    --data-urlencode "BUILD_CMD_PARAM=${build_cmd}" \
    --data-urlencode "FAKE_USER=${user_number}" || return "$(handle_error "Failed to trigger Jenkins build")"
  
  # 获取构建编号
  local abuild_number
  abuild_number=$(get_build_number "$task_name" "$build_cmd")
  [ -z "$abuild_number" ] || [ "$abuild_number" = "-1" ] && return "$(handle_error "Build was cancelled or failed to get build number")"
  
  # 监控构建结果
  monitor_build_progress "$task_name" "$abuild_number" || return $?
  
  # 获取构建结果
  get_build_result "$abuild_number" "$task_name"
}

# 显示帮助信息
show_help() {
  echo "Usage: abuild [OPTIONS] <svn_url> <ipe_package_name> [module_list] [user_number] [timestamp] [lib_path] [debug|release]"
  echo
  echo "Options:"
  echo "  -h, --help     显示此帮助信息"
  echo "  -v, --verbose  启用详细日志输出"
  echo "  -t, --timeout  设置等待超时时间（秒）"
  echo
  echo "Example:"
  echo "  abuild http://svn/path MyPacket MyModule h12345 20231101 /path/to/lib debug"
}

# 解析命令行选项
parse_options() {
  while [ $# -gt 0 ]; do
    case $1 in
      -h|--help)
        show_help
        exit 0
        ;;
      -v|--verbose)
        LOG_LEVEL=2
        shift
        ;;
      -t|--timeout)
        TIMEOUT=$2
        shift 2
        ;;
      *)
        # 非选项参数，停止解析
        break
        ;;
    esac
  done
}

# 主函数
main() {
  parse_options "$@"
  
  if [ $# -lt 2 ]; then
    show_help
    exit 1
  fi
  
  local result
  result=$(build_job_compile "$@")
  
  if [ -n "$result" ]; then
    echo "$result"
    return 0
  else
    echo "Build failed or encountered an error."
    return 1
  fi
}

# 执行主函数
main "$@"
