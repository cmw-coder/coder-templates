.. _topics-定制检查:


定制检查
===========

atf_assert
------------

在前面命令行、测试仪部分章节，介绍了两个检查方法： ``CheckCommand`` 、 ``CheckStreamStats`` 、 ``CheckPortStats`` 等，这些方法有各自的使用场景，当这些方法无法满足需求时，可以使用atf定制检查： ``atf_assert``

如下两个检查是等价的：

.. code-block:: python
    :linenos:

    gl.DUT.CheckCommand('检查端口信息，预期链路状态UP，IP地址正确', cmd=f'display interface Ethernet0/1', 
                    expect=['Line protocol current state: UP', 'Internet Address is 11.91.255.79/24'], 
                    is_strict=True, relationship='and', 
                    stop_max_attempt=3, wait_fixed=2)


.. code-block:: python
    :linenos:

    with atf_assert(
      '检查端口信息，预期链路状态UP，IP地址正确'
    ) as ars:
        for i in range(3):
            cmd_return = gl.DUT.send(f'display interface Ethernet0/1')
            if 'Line protocol current state: UP' in cmd_return and \
               'Internet Address is 11.91.255.79/24' in cmd_return:
                ars.append(True)
                break
            atf_wait('重试等待2s', 2)
        else:
            atf_logs(f'端口信息为：{cmd_return}', 'error')


定制检查将由用户完成主体代码，主体代码需要自行处理重试（次数和间隔）、执行失败后的信息打印，然后调用 ``atf_assert`` 上下文管理器执行主体代码，
其包含一个必选参数，代表检查项描述。检查通过时，向 ``ars`` 列表变量添加元素 ``True`` ，并跳出循环。  ``ars`` **用于框架内部赋值，其名称不能修改**。


atf_assert_check
------------------

在某些场景，检查是比较简单的，比如相等、大于、不相等，也没有循环的要求，可以使用 ``atf_assert_check`` 方法。

.. code-block:: python
    :linenos:

    
    atf_assert_check('预期两值不相等', 10, 20, 'not_equal')

    atf_assert_check('预期前者大于后者', 10, 20, 'greater')

    atf_assert_check('预期前者小于等于后者', 10, 20, 'lte')
    
``atf_assert_check`` 方法包含4个参数，前三个为位置参数，第一个为检查项的描述信息，第二、第三为待比较的信息，第4个为比较方法，包含：
  - ``equal``: 比较两者相等，同类型数据才能进行比较
  - ``neq`` 或 ``not_equal`` : 比较前者不等于后者，同类型数据才能进行比较
  - ``gt`` 或 ``greater`` : 比较前者大于后者，同类型数据才能进行比较
  - ``lt`` 或 ``less`` : 比较前者小于后者，同类型数据才能进行比较
  - ``gte`` 或 ``greater_equal`` : 比较前者大于等于后者，同类型数据才能进行比较
  - ``lte`` 或 ``less_equal`` : 比较前者小于等于后者，同类型数据才能进行比较
  - ``is_in``: 比较前者存在于后者，前者为一个值，后者为一个容器（例如列表、字符串、元组、集合、字典等）
  - ``not_in``: 比较前者不存在于后者，前者为一个值，后者为一个容器（例如列表、字符串、元组、集合、字典等）

atf_check
------------

上面定制检查示例，在进行断言时，直接使用的 ``in`` 命令，如果想将对比的变量记录到脚本日志中，只有通过 ``atf_logs`` 方法记录，这里推荐使用 ``atf_check`` 类的方法进行断言，断言失败会自动记录相关变量。

.. code-block:: python
    :linenos:

    with atf_assert(
      '检查端口信息，预期链路状态UP，IP地址正确'
    ) as ars:
        for i in range(3):
            cmd_return = gl.DUT.send(f'display interface Ethernet0/1')
            if atf_check.is_in('Line protocol current state: UP', cmd_return) and \
                atf_check.is_in('Internet Address is 11.91.255.79/24', cmd_return):
                ars.append(True)
                break
            atf_wait('重试等待2s', 2)


``atf_check`` 类支持的方法如下，参数值均为2个：
  - ``atf_check.equal``: 比较两者相等，同类型数据才能进行比较
  - ``atf_check.neq`` 或 ``atf_check.not_equal`` : 比较前者不等于后者，同类型数据才能进行比较
  - ``atf_check.gt`` 或 ``atf_check.greater`` : 比较前者大于后者，同类型数据才能进行比较
  - ``atf_check.lt`` 或 ``atf_check.less`` : 比较前者小于后者，同类型数据才能进行比较
  - ``atf_check.gte`` 或 ``atf_check.greater_equal`` : 比较前者大于等于后者，同类型数据才能进行比较
  - ``atf_check.lte`` 或 ``atf_check.less_equal`` : 比较前者小于等于后者，同类型数据才能进行比较
  - ``atf_check.is_in``: 比较前者存在于后者，前者为一个值，后者为一个容器（例如列表、字符串、元组、集合、字典等）
  - ``atf_check.not_in``: 比较前者不存在于后者，前者为一个值，后者为一个容器（例如列表、字符串、元组、集合、字典等）


.. code-block:: python
    :linenos:
    
    # 前者为字符串， 后者为字符串
    atf_check.is_in('abc', 'abcd')

    # 前者为字符串， 后者为列表、元组、集合
    atf_check.is_in('abc', {'abc', 100, 'ab'})

    # 前者为字符串， 后者为字典
    atf_check.is_in('abc', {'abc': 100})

    # 前者为列表、元组、集合，后者为列表、元组、集合
    atf_check.is_in(['abc', 10], [['abc', 10], 100, 'ab'])
    atf_check.is_in(('abc', 10), [('abc', 10), 100, 'ab'])
