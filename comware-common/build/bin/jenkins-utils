#!/bin/bash

# shellcheck source=/dev/null
source "log-utils"

# Get Jenkins Crumb to prevent CSRF protection
jenkins_get_crumb() {
    curl -s --fail --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/crumbIssuer/api/json" | jq -r '.crumb'
}

# Get build number, with timeout control
jenkins_get_build_number() {
    local task_name=$1
    local build_cmd=$2
    local start_time
    start_time=$(date +%s)

    log_info "Looking for build number for task: ${task_name}"
    log_debug "Build command: ${build_cmd}"

    # Wait for the queued task to start running
    while [ $(($(date +%s) - start_time)) -lt "$TIMEOUT" ]; do
        # Check tasks in the queue
        local queue_info
        queue_info=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/queue/api/json")

        # Use simplified jq query to check if there's a matching task
        if echo "$queue_info" | jq -e '.items[] | select(.task.name == "'"$task_name"'") | 
      (.actions[] | select(.parameters != null) | .parameters[] | select(.value == "'"$build_cmd"'")) and 
      (.actions[] | select(.causes != null) | .causes[] | select(.userId == "'"$JENKINS_USERNAME"'"))' >/dev/null; then
            log_info "Matching task found in queue, waiting..."
            sleep 3
            continue
        fi

        log_info "Task not found in queue or has started running"
        break
    done

    # Timeout check
    if [ $(($(date +%s) - start_time)) -ge "$TIMEOUT" ]; then
        log_error "Timeout waiting for build to start after ${TIMEOUT} seconds"
        echo "-1"
        return 1
    fi

    # Get the latest build number
    local next_build_number
    next_build_number=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/api/json" | jq '.nextBuildNumber - 1')
    log_info "Latest build number for ${task_name}: ${next_build_number}"

    # Find matching build
    local i=0
    log_debug "Checking recent builds for matching command and user..."
    while [ "$next_build_number" -gt 0 ] && [ $i -lt 10 ]; do
        log_debug "Checking build #${next_build_number}"
        local job_info
        job_info=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${next_build_number}/api/json")

        # Handle two possible parameter orders
        if echo "$job_info" | jq -e '(.actions[0].parameters[0].value == "'"$build_cmd"'" and .actions[1].causes[0].userId == "'"$JENKINS_USERNAME"'") or
        (.actions[1].parameters[0].value == "'"$build_cmd"'" and .actions[0].causes[0].userId == "'"$JENKINS_USERNAME"'")' >/dev/null; then
            log_info "Found matching build: #${next_build_number}"
            echo "$next_build_number"
            return 0
        fi

        next_build_number=$((next_build_number - 1))
        i=$((i + 1))
    done

    log_error "Failed to find matching build after checking ${i} builds"
    echo "-1"
    return 1
}

# Monitor build results
jenkins_monitor_build_progress() {
    local task_name="$1"
    local build_number="$2"

    if [ "$build_number" = "-1" ]; then
        log_error "Build canceled or not found"
        return 1
    fi

    local start_time
    start_time=$(date +"%Y%m%d.%H%M%S")

    local timestamp_seconds
    timestamp_seconds=$(date -d "$start_time" +%s 2>/dev/null || date +%s)

    local build_url
    build_url=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${build_number}/api/json" | jq -r '.url')

    log_info "Build #${build_number} started at ${start_time}"
    log_info "Build console URL: ${build_url}console"

    # Wait for build completion, with timeout check
    local wait_time=0
    local job_status="null"
    log_info_n "Waiting for build to complete "

    while [ "$job_status" = "null" ] && [ "$wait_time" -lt "$TIMEOUT" ]; do
        sleep 3
        wait_time=$((wait_time + 3))
        job_status=$(curl -s --user "${JENKINS_AUTH}" "${build_url}/api/json" | jq -r '.result')
        log_info_n "."
    done
    log_info "" # Just add a newline

    if [ "$wait_time" -ge "$TIMEOUT" ]; then
        log_error "Build timed out after ${TIMEOUT} seconds"
        return 2
    fi

    local end_time
    end_time=$(date +"%Y%m%d.%H%M%S")

    local end_seconds
    end_seconds=$(date -d "$end_time" +%s 2>/dev/null || date +%s)

    local duration=$((end_seconds - timestamp_seconds))

    log_info "Build completed at: ${end_time} (${duration}s)"
    log_info "Build result: ${job_status}"

    return 0
}
