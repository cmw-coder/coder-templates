.. _topics-外挂服务:


外挂服务
================
本节主要介绍pyPilot框架提供给用户可选的外挂服务

--------------------------------
RemoteTestCenter服务
--------------------------------
此服务主要提供给用户需要在pypilot脚本中调用TestCenter测试仪接口时使用，由于目前多数TestCenter测试仪没有提供python3.8的接口，目前通过RemoteTestCenter服务实现在pypilot脚本中用python接口调用对应测试仪中的tcl接口执行的功能。

**环境准备**：

1）安装指定版本的vtp-cloud，检查是否包含RemoteTestCenter服务

.. image:: ./images/外挂服务/RemoteTestCenter服务查看.png

2）如果未查找到服务则需要下载RemoteTestCenter服务插件，下载方式如下：

待补充

3）检查对应tcl库是否下载成功，RemoteTestCenter服务调用的vtp-cloud的tcl库，tcl库更新方式如下：

i）更新方法1：vtp-cloud切换到tcl视图下，会有一个提示用户更新的界面

.. image:: ./images/外挂服务/tcl库下载.png

ii）更新方法2，手动再次检查库文件是否需要更新

.. image:: ./images/外挂服务/tcl库下载2.png

4）检查python库是否更新

i）更新方法1：vtp-cloud切换到python视图下，会有一个提示用户更新的界面

.. image:: ./images/外挂服务/python库下载.png

ii）更新方法2，手动再次检查库文件是否需要更新

.. image:: ./images/外挂服务/python库下载2.png


以上是用户在使用RemoteTestCenter服务前的环境准备工作，后续即可使用TestCenter测试仪进行脚本执行。


--------------------------------
SimwareV9自动部署服务
--------------------------------

Simwarev9自动部署服务介绍
--------------------------------

1.  **SimwareV9自动部署服务是什么？**


   SimwareV9自动部署服务可以通过Rest接口调用CAS服务器资源生成自动化脚本所需的拓扑环境，
   满足V9版本的测试需求；在SimwareV9的功能中，主要涉及两个新的功能模块，分别是创建虚机和配置虚机间的链接。
   
   该服务能够高效的自动生成自动化脚本所需要的测试虚拟环境，并且能够在脚本运行完后配合ITC自动删除冗余环境，最大化利用服务器资源，配合ITC采用并发技术，
   一个服务器能够同时模拟30-40台的设备。能够极大的减少自动化测试使用的测试设备。
   
   一句话说明就是自动模拟设备和相关的连接组成拓扑环境以满足在该环境上执行自动化脚本的服务。

--------------

2.  **交互流程：**
  
.. image:: ./images/外挂服务/Simware9Service_交互流程.PNG

--------------

3.  **设备初始化流程：**
  

.. image:: ./images/外挂服务/Simware9Service_设备初始化流程.PNG



--------------

4.  **部署服务演化：**
   
   ->Simwarev7自动部署（tcl）：适用于Simwarev7设备，目前还在使用

   ->Simwarev9自动部署（tcl）：适用于Simwarev9设备，目前正在被Simwarev9自动部署（python）替代
   
   ->Simwarev9自动部署（python）：适用于Simwarev9设备，本指导书以该版本为描述对象

适用范围
----------------

.. code-block:: bash

    1.Simwarev9自动部署方案不区分对应的自动化脚本和框架:TCL，ATF框架的脚本和pyPilot的脚本都适用
    2.适用于vtp-cloud使用，不适用于vtp-next
    3.适用于Simwarev9，不适用于Simwarev7


环境准备
----------------

1.  **执行机准备**

    第一步：安装或者更新vtp-cloud到最新版本

    第二步：打开vtp-cloud检查：设置->检查python设置->确保本地框架和python环境已经更新到最新状态

    第三步：vtp-cloud->左边栏->插件->外部插件->检查服务是否起来：ready代表服务已经启动

.. image:: ./images/外挂服务/Simware9Service_执行机准备.png

2.  **宿主机准备**

   环境上有安装MobaXterm或者类似的终端工具用于手动登录调试宿主机（非必须），

   保证执行机能够正常连接登录宿主机（可使用终端工具手动登录确认）

3.  **执行机上Simware9Service自动部署工程所在位置说明（默认）**
    D:\\RDTestClientData\\plugins\\iTCSimware9Service

使用方法
----------------

1.  **环境确认**

按照环境准备里面的要求保证执行机和宿主机环境可以使用



2.  **任务下发**
   
创建任务的时候勾选vtp-cloud执行，运行环境要选择有宿主机的特定环境，其他与普通任务下发一致

勾选vtp-cloud执行：新建任务后在高级选项勾选，如下图

.. image:: ./images/外挂服务/Simware9Service_任务下发_1.PNG
   

有宿主机的特定环境一般特征如下：组网环境（RACK列）后缀名都是auto，如下图
 
.. image:: ./images/外挂服务/Simware9Service_任务下发_2.PNG


点进组网以后：有款型为Server的宿主机

.. image:: ./images/外挂服务/Simware9Service_任务下发_3.png

3.  **任务运行**
   
任务下发后会下发topo进行部署，topo部署成功后任务日志会有如下显示：

.. image:: ./images/外挂服务/Simware9Service_任务运行.PNG

日志路径和机制
----------------

1.  **日志路径**

    默认位置

    D:\\RDTestClientData\\plugins\\iTCSimware9Service\\log

    如果不是默认位置，请在执行机上搜索iTCSimware9ReadyService.py，在同目录下找log目录




2.  **日志机制**
   
    （1）日志在vtp-cloud启动也就是服务启动的时候会创建一个日志文件

    （2）日志名构成:iTCSimware9ReadyService+日志文件建立日期+时间,举例如下

         iTCSimware9ReadyService_2024-04-08_19-21-33.log

    （3）日志文件大小:最大1000kb

    （4）日志保留时长:10天

3.  **日志示例**

部署开始

.. image:: ./images/外挂服务/Simware9Service_日志示例_1.png

图中标记如下解释：

（1）服务初始化，一般见于vtp-cloud打开部署服务初始化的时候

（2）ITC调用部署接口

（3）进入部署主流程，下面为ITC下发的map和top信息

部署结束

.. image:: ./images/外挂服务/Simware9Service_日志示例_2.png

图中标记如下解释：

（4）宿主机资源剩余的可部署数

（2）ssh连接关闭

（3）返回给ITC数据：主要是测试床数据

典型问题举例和解决方案
----------------------


1.  **服务没有开启或者开启多个等状态异常**

问题现象：

（1）vtp-cloud显示服务未开启：下图中iTCSimware9Service显示dead

.. image:: ./images/外挂服务/Simware9Service_服务没有开启或者开启多个等状态异常_1.PNG


（2）检查任务管理器：下图中iTCSimware9Service的进程出现多个或者未出现

.. image:: ./images/外挂服务/Simware9Service_服务没有开启或者开启多个等状态异常_2.png

解决方案：

强制结束iTCSimware9Service进程，重启vtp-cloud，确保任务管理器iTCSimware9Service的进程只有一个，
并且vtp-cloud显示iTCSimware9Service服务为ready

2.  **ITC上任务日志上显示返回为-1（部署前检查失败）**

问题现象：
ITC上任务日志一直显示部署失败，并且显示返回为-1

问题原因：

（1）任务状态错误

解决方案：手动删除宿主机绝对路径root/itcSimware9Service下的in_deploy.txt

（2）宿主机上的资源不够用

解决方案：手动删除宿主机上的多余板卡（删除前确认这些板卡不再使用）
或者宿主机上运行命令 sh /sim9rm/simware9_rm.sh 可以直接删除所有板卡

3. **ITC上任务日志上显示返回为NULL**

问题原因：

（1）simware9服务器连接失败

解决方案：
手动确认宿主机是否能连接成功,如果无法连接请解决连接问题
确认连接没问题后，重启vtp-cloud

4. **问题不确认的时候初步解决办法和初步定位方法**

初步解决办法：重启vtp-cloud

初步定位方法：查看对应时间点的log，正则表达式搜索 失败|error搜索可以看到初步的问题原因，

可以根据问题描述去判断问题原因

.. image:: ./images/外挂服务/Simware9Service_simware9服务器连接失败.PNG
   
**备注：以上描述无法解决问题的话请联系接口人：薛琨炜 x31941**

问题初步debug方法
------------------

1.  **日志的使用**

   （1）服务主要使用atf_log.logger打印日志

   （2）添加日志和日志显示：

   第一幅图中

   第一行为添加固定字符串的打印

   第二行为添加组合字符串的打印

   第二幅图 为日志显示
    .. image:: ./images/外挂服务/Simware9Service_日志的使用_1.PNG
    .. image:: ./images/外挂服务/Simware9Service_日志的使用_2.PNG

2.  **itcSimware9Service的代码路径和主要接口**

   （1）代码路径(默认)：D:\\RDTestClientData\\plugins\\iTCSimware9Service

        主要代码文件：iTCSimware9ReadyService.py

   （2）主要接口：

         api_deploy_simware9_topology：用于下发部署组网命令

         api_undeploy_simware9_topology：用于下发删除组网命令，根据入参不同，可以删除单个组网，也可以删除所有组网


3.  **部署主要流程**
   
（1） 部署主要流程图如下

.. image:: ./images/外挂服务/Simware9Service_部署主要流程.PNG
      
备注：虚线代表可以该流程为非必须流程，如果勾选不自动升级或者下发的升级版本已在宿主机上，均直接部署

   （2）主要流程关键字：

      服务初始化：“simware9CasReadyService___init__”

      itc接口调用：
      “进入api_deploy_simware9_topology”，
      “api_undeploy_simware9_topology”，
      “api_getdeploy_simware9_topology”

      进入部署主函数：“启动Simware9组网部署...”

      完成simware9服务器的ssh连接：“open_ssh_connection连接宿主机耗时”

      部署前检查：“剩余可部署的数量”

      解析topo和map完成：“analyse_topo解析拓扑文件耗时”，“analyse_map解析拓扑文件耗时”

      根据拓扑信息生成对应的cfg配置文件完成：“create_cfgfile生成cfg配置文件耗时”

      根据拓扑信息计算设备及端口完成：“mapping_logic_dev_to_physic_dev根据拓扑信息计算设备及端口耗时”

      版本升级完成：“版本下载耗时”

      创建组网完成：“完成Simware9组网配置”

      返回的testbed：“testbed:”

      错误信息通用查询：失败|error（正则表达式搜索 ）


3.  **问题处理流程**
   
   （1） 参照典型问题排查问题

   （2） 通过关键字排查问题

   （3） 通过添加log自行debug排查（需要一定熟悉度）

   （4） 寻求接口人员帮助

维护与更新
----------------

Simwarev9自动部署服务包含在在pyPilot 框架内，请参考框架库的维护与更新：

`pyPilot用户使用指导手册 <http://rdtest.h3c.com/client/releases/auto_test/document/pyPilot%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC%E6%89%8B%E5%86%8C/%E7%94%A8%E6%88%B7%E6%8C%87%E5%AF%BC%E6%89%8B%E5%86%8C/%E6%A1%86%E6%9E%B6%E5%BA%93%E7%BB%B4%E6%8A%A4%E4%B8%8E%E6%9B%B4%E6%96%B0.html>`_ 

手动单独更新Simwarev9自动部署服务：
下载以下svn地址中的工程到本地路径

http://h3cbj52-svn.h3c.com/TestPlatFormV5-New/Python框架/外挂服务/iTCSimware9Service

.. note:: 请不要私自更新svn地址中的文件


--------------------------------
链路检查工具
--------------------------------
该脚本工具用于进行指定测试床的链路检查，要求测试床为.tbdx后缀。支持comware设备与comware设备、comware设备与测试仪间的链路检查，不支持comware与PC间链路检查。


使用示例见下

.. code-block:: python
    :linenos:
   
    from AtfLibrary.utils.check_link import CheckLink
    worker = CheckLink(testbed_file='d:/S6520.tbdx')
    worker.run()


输出信息格式如下：

::
    
   +-------------------------------------------------------------------------------------------+
   |                                        检查结果汇总                                       |
   +--------------------------------------------------------------+------+----------+----------+
   | 链路                                                         | 类型 | 检查结果 | 失败原因 |
   +--------------------------------------------------------------+------+----------+----------+
   | S6520X_SI_2_4_10013 XGE10/0/11 --> S6520-SI_0_4_10005        | p2p  |   通过   |          |
   | XGE1/0/16                                                    |      |          |          |
   +--------------------------------------------------------------+------+----------+----------+
   | S6520-SI_1_4_10006 XGE10/0/11 --> S6520X_SI_2_4_10013        | p2p  |   通过   |          |
   | XGE10/0/8                                                    |      |          |          |
   +--------------------------------------------------------------+------+----------+----------+
   | S6520-SI_1_4_10006 XGE10/0/5 --> TestMaster_1 XGE1/4/0/F     | p2p  |   通过   |          |
   +--------------------------------------------------------------+------+----------+----------+
   | TestMaster_1 XGE1/4/2/F --> S6520X_SI_2_4_10013 XGE10/0/4    | p2p  |   通过   |          |
   +--------------------------------------------------------------+------+----------+----------+
   | S6520-SI_1_4_10006 XGE10/0/1 --> runner_pc1 0001 -->         | hub  |   通过   |          |
   | S6520X_SI_2_4_10013 XGE10/0/2 --> S6520-SI_0_4_10005         |      |          |          |
   | XGE1/0/1                                                     |      |          |          |
   +--------------------------------------------------------------+------+----------+----------+