.. _topics-接口调试:


接口调试
=============
有时需要修改设备类或测试仪类的接口，在脚本中调试，需要等待初始化等操作完成，比较耗时，可以使用下面的调试代码。

调试Comware设备类接口
----------------------

.. code-block:: python
    :linenos:

    # debug_comware_method.py

    import pytest_atf
    pytest_atf.noatf_mode()
    import time

    from AtfLibrary.topology import TopologyMap
    from AtfLibrary.product import Terminal, CCmwDevice
    finder = TopologyMap()

    # 创建cmw设备的Terminal
    term1 = Terminal()
    term1.access_name = 'MSR3000_1'
    term1.access_address = ''
    term1.open_window()


    # 创建cmw设备的Terminal
    term2 = Terminal()
    term2.access_name = 'MSR3000_2'
    term2.access_address = ''
    term2.open_window()


    # 创建cmw设备对象
    dut1 = CCmwDevice()
    dut1.add_terminal(term1)
    dut1.topofinder = finder


    # 创建cmw设备对象
    dut2 = CCmwDevice()
    dut2.add_terminal(term2)
    dut2.topofinder = finder

    # 初始化设备，当设置mode='debug'时，不下发stp/lldp等全局配置
    dut1.initial_device()
    dut2.initial_device(mode='debug')

    # 串行下发命令
    dut1.send('disp this')
    dut2.send('disp this')

    # 并行下发命令行
    pytest_atf.msend((dut1, 'disp this'), (dut2, 'disp int brief'))

    # 删除对象
    del dut1
    del dut2


调试TestMaster测试仪接口
--------------------------

.. code-block:: python
    :linenos:

    # debug_testmaster_method.py

    import pytest_atf
    pytest_atf.noatf_mode()
    import time

    from AtfLibrary.product import Terminal
    from AtfLibrary.instrument.testmaster import CSTM, CSTMPort

    # 创建测试仪的Terminal
    term = Terminal()
    term.access_address = '192.168.1.1'
    term.access_protocol = 'Telnet'

    # 创建测试仪的端口
    port1 = CSTMPort()
    port2 = CSTMPort()

    port1.name = 'GigabitEthernet1/1/3/C'
    port2.name = 'GigabitEthernet1/1/2/C'

    port1.ipv4_address = '120.1.1.2/24'
    port2.ipv4_address = '130.1.1.2/24'


    # 创建tm对象
    ctx = CSTM()
    ctx.add_terminal(term)
    ctx.add_port(port1)
    ctx.add_port(port2)
    ctx.use_port(port1)
    ctx.use_port(port2)
    ctx.port1 = port1
    ctx.port2 = port2
    ctx.port1.l_dev_port = 'ctx.port1'
    ctx.port2.l_dev_port = 'ctx.port2'


    # 初始化tm
    ctx.initial_device()

    # 创建一条Raw流
    ctx.port1.CreateIPStream(FrameLen=100)
    ctx.port2.Clear()
    port1.Run()

    time.sleep(3)

    # 获取端口统计
    res = ctx.port2.GetPortInfo('RcvPktRate')
    print(res)

    ctx.port1.Stop()

    # 创建OSPF ROUTER，并使能协议仿真
    ospfv2Router1 = ctx.port1.CreateRouter(RouterType='ospfv2', RouterName='ospfv2Router1', RouterId='99.1.1.1', FlagPing=True)
    ospfv2Router1.OspfV2SetSession(ipaddr='10.1.1.1', sutipaddress='10.1.1.2', abr=True, networktype='native')
    ospfv2Router1.Ospfv2Enable()

    # 启动协议仿真
    ctx.port1.StartRouter()

    time.sleep(10)

    # 停止协议仿真
    ctx.port1.StopRouter()

    # 清理tm
    ctx.uninitial_device()

    # 删除对象
    del ctx
