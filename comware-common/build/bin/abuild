#!/bin/bash

# Get configuration from environment variables, use defaults as fallback
TIMEOUT=${TIMEOUT:-600}   # Default wait timeout (seconds)
LOG_LEVEL=${LOG_LEVEL:-1} # 0=error, 1=info, 2=debug
JENKINS_SERVER_URL=${JENKINS_SERVER_URL:-"http://10.153.3.174:8080"}
JENKINS_USERNAME=${JENKINS_USERNAME:-"h25380"}
JENKINS_API_TOKEN=${JENKINS_API_TOKEN:-"117b0fdde578a988ec1be741dd777c1a1c"}
PROJECT_OPEN_FOLDER_LIST=${PROJECT_OPEN_FOLDER_LIST:-""} # This should be set automatically
PROJECT_OPEN_PATH=${PROJECT_OPEN_PATH:-""}               # This should be set automatically
PROJECT_PUBLIC_PATH=${PROJECT_PUBLIC_PATH:-""}           # This should be set automatically
SVN_USERNAME=${SVN_USERNAME:-$(whoami)}                  # This should be set automatically

JENKINS_AUTH="${JENKINS_USERNAME}:${JENKINS_API_TOKEN}"

# shellcheck source=/dev/null
source "log-utils"
# shellcheck source=/dev/null
source "jenkins-utils"

# Monitor build results
jenkins_monitor_build_progress() {
    local task_name="$1"
    local build_number="$2"

    if [ "$build_number" = "-1" ]; then
        log_error "Build canceled or not found"
        return 1
    fi

    local start_time
    start_time=$(date +"%Y%m%d.%H%M%S")

    local timestamp_seconds
    timestamp_seconds=$(date -d "$start_time" +%s 2>/dev/null || date +%s)

    local build_url
    build_url=$(curl -s --user "${JENKINS_AUTH}" "${JENKINS_SERVER_URL}/job/${task_name}/${build_number}/api/json" | jq -r '.url')

    log_info "Build #${build_number} started at ${start_time}"
    log_info "Build console URL: ${build_url}console"

    # Wait for build completion, with timeout check
    local wait_time=0
    local job_status="null"
    log_info_n "Waiting for build to complete "

    while [ "$job_status" = "null" ] && [ "$wait_time" -lt "$TIMEOUT" ]; do
        sleep 3
        wait_time=$((wait_time + 3))
        job_status=$(curl -s --user "${JENKINS_AUTH}" "${build_url}/api/json" | jq -r '.result')
        log_info_n "."
    done
    log_info "" # Just add a newline

    if [ "$wait_time" -ge "$TIMEOUT" ]; then
        log_error "Build timed out after ${TIMEOUT} seconds"
        return 2
    fi

    local end_time
    end_time=$(date +"%Y%m%d.%H%M%S")

    local end_seconds
    end_seconds=$(date -d "$end_time" +%s 2>/dev/null || date +%s)

    local duration=$((end_seconds - timestamp_seconds))

    log_info "Build completed at: ${end_time} (${duration}s)"
    log_info "Build result: ${job_status}"

    return 0
}

# Execute build job
build_job_compile() {
    local ipe_package_name="$1"
    local folder_list="$2"
    local lib_path="$3"
    local version_type="$4"

    # Creating shadow branch
    log_info "Creating shadow branch for project open folder: ${PROJECT_OPEN_PATH}"
    local shadow_branch_url
    shadow_branch_url=$(shadow-branch -f "$PROJECT_OPEN_PATH")
    # Detect if shadow branch url contains cmwcode-open and extract the subsequent characters
    if [[ "$shadow_branch_url" != *"cmwcode-open"* ]]; then
        jenkins_handle_error "Invalid shadow branch url, this may be caused by an incorrect PROJECT_OPEN_PATH."
        return 1
    fi
    log_info "Creating shadow branch for project public folder: ${PROJECT_PUBLIC_PATH}"
    shadow-branch -f "$PROJECT_PUBLIC_PATH"

    local svn_path=${shadow_branch_url#*cmwcode-open}
    log_debug "Found cmwcode-open in SVN path, extracted path: $svn_path"

    # Determine task name
    local task_name
    if [[ "$svn_path" == *"V9R1"* ]]; then
        task_name="V9ABUILD"
    else
        task_name="ABUILD"
    fi

    # Convert folder list from JSON array to a comma-separated string
    local module_list
    module_list=$(echo "$PROJECT_OPEN_FOLDER_LIST" | tr -d '[]"')

    # Build command
    local build_cmd="-e ${ipe_package_name} -s ${svn_path}"
    [ -n "$module_list" ] && build_cmd="${build_cmd}:${module_list}"
    [ -n "$folder_list" ] && build_cmd="${build_cmd} -f ${folder_list}"
    [ -n "$lib_path" ] && build_cmd="${build_cmd} -i ${lib_path}"
    [ "${version_type,,}" != "debug" ] && build_cmd="${build_cmd} -r"

    log_info "Starting ${task_name}:\n- Packages: ${ipe_package_name}\n- Repo: ${svn_path}\n- Modules: ${module_list}\n- Type: ${version_type}\n- Lib path: ${lib_path}\n- User: ${SVN_USERNAME}"
    log_debug "Build command: ${build_cmd}"

    # Get CSRF token
    local crumb
    crumb=$(jenkins_get_crumb)
    if [ -z "$crumb" ]; then
        jenkins_handle_error "Failed to get Jenkins crumb"
        return 1
    fi

    # Trigger Jenkins build
    if ! curl -s -X POST --user "${JENKINS_AUTH}" -H "Jenkins-Crumb: ${crumb}" \
        "${JENKINS_SERVER_URL}/job/${task_name}/buildWithParameters" \
        --data-urlencode "BUILD_CMD_PARAM=${build_cmd}" \
        --data-urlencode "FAKE_USER=${SVN_USERNAME}" >/dev/null; then
        jenkins_handle_error "Failed to trigger Jenkins build"
        return 1
    fi

    # Get build number
    local abuild_number
    abuild_number=$(jenkins_get_build_number "$task_name" "$build_cmd")
    if [ -z "$abuild_number" ] || [ "$abuild_number" = "-1" ]; then
        jenkins_handle_error "Build was cancelled or failed to get build number"
        return 1
    fi

    # Monitor build results
    if ! jenkins_monitor_build_progress "$task_name" "$abuild_number"; then
        jenkins_handle_error "Build monitoring failed"
        return $?
    fi

    # Get build result
    jenkins_get_build_result "$abuild_number" "$task_name"
}

# Display help information
show_help() {
    echo "Usage: abuild [options] <-e> <ipe_package_name>"
    echo
    echo "Options:"
    echo "  -e, --ipe-package <name>    Specify the IPE package name, e.g., 64sim9cen (required)"
    echo "  -f, --folder <folder_list>  Specify to only build the folder list, e.g., ospf,nqa"
    echo "  -h, --help                  Display this help information"
    echo "  -i, --input-lib <lib_path>  Specify the library path to use, e.g., /path/to/lib"
    echo "  -r, --release               Build in release mode (default is debug)"
    echo "  -t, --timeout               Set wait timeout in seconds"
    echo "  -v, --verbose               Enable verbose logging"
    echo
    echo "Examples:"
    echo "  abuild -e 64sim9cen"
    echo "  abuild -e 64sim9cen,64sim9dis -r"
    echo "  abuild -e 64sim9cen,64sim9dis -i /path/to/lib"
    echo
    echo "Configurable Environment Variables:"
    echo "  LOG_LEVEL                   Log level, 0=error, 1=info, 2=debug, default is 1"
    echo "  JENKINS_SERVER_URL          Jenkins server URL, default is http://10.153.3.174:8080"
    echo "  JENKINS_USERNAME            Jenkins API username, default is h25380"
    echo "  JENKINS_API_TOKEN           Jenkins API token, default is 117b0fdde578a988ec1be741dd777c1a1c"
    echo "  PROJECT_OPEN_FOLDER_LIST    Project open folder list (JSON array), this should be set automatically"
    echo "  PROJECT_OPEN_PATH           Project open folder path, this should be set automatically"
    echo "  PROJECT_PUBLIC_PATH         Project public folder path, this should be set automatically"
    echo "  SVN_USERNAME                SVN username to start ABuild, this should be set automatically"
    echo "  TIMEOUT                     Default waiting timeout in seconds, default is 300"
}

# Main function
main() {
    local ipe_package_name=""
    local folder_list=""
    local lib_path=""
    local version_type="debug"
    while [ $# -gt 0 ]; do
        case $1 in
        -e | --ipe-package)
            if [ -z "$2" ]; then
                log_error "IPE package name is required after -e or --ipe-package"
                show_help
                exit 1
            fi
            ipe_package_name="$2"
            shift 2
            ;;
        -f | --folder)
            if [ -z "$2" ]; then
                log_error "Folder list is required after -f or --folder"
                show_help
                exit 1
            fi
            folder_list="$2"
            shift 2
            ;;
        -h | --help)
            show_help
            exit 0
            ;;
        -i | --input-lib)
            if [ -z "$2" ]; then
                log_error "Library path is required after -i or --input-lib"
                show_help
                exit 1
            fi
            lib_path="$2"
            shift 2
            ;;
        -r | --release)
            version_type="release"
            shift
            ;;
        -t | --timeout)
            TIMEOUT=$2
            shift 2
            ;;
        -v | --verbose)
            LOG_LEVEL=2
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        esac
    done

    if [ -z "$ipe_package_name" ]; then
        log_error "ipe_package_name is required, please specify it with -e or --ipe-package"
        show_help
        exit 1
    fi

    if [ -z "$PROJECT_OPEN_PATH" ]; then
        log_error "PROJECT_OPEN_PATH is not set, please set it before running this script."
        exit 1
    fi

    build_job_compile "$ipe_package_name" "$folder_list" "$lib_path" "$version_type"
    local build_result=$?

    # Delete shadow branch
    shadow-branch -r "$PROJECT_OPEN_PATH"
    shadow-branch -r "$PROJECT_PUBLIC_PATH"

    return $build_result
}

# Execute main function
main "$@"
