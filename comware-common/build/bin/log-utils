#!/bin/bash

# Track if the previous log output used the -n flag
PREVIOUS_LOG_NONEWLINE=false
PREVIOUS_LOG_LEVEL=""
# Log processing function - supports line breaks and indentation, connecting multiple lines
log_message() {
    local level="$1"
    local nonewline=false
    shift

    # Check if newlines should be omitted
    if [ "$1" = "-n" ]; then
        nonewline=true
        shift
    fi

    local indent="${LOG_INDENT:-0}"
    local indent_str=""
    local level_length=${#level}
    local continuation_prefix
    local is_first_line=true
    local skip_prefix=false

    # Create indentation string
    if [ "$indent" -gt 0 ]; then
        indent_str=$(printf "%${indent}s" "")
    fi

    # Create prefix for continuation lines, aligned with the first line level
    continuation_prefix=$(printf "%$((level_length - 1))s|" "")

    # Determine whether to skip the prefix (if the previous output used -n and has the same level)
    if [ "$PREVIOUS_LOG_NONEWLINE" = true ] && [ "$PREVIOUS_LOG_LEVEL" = "$level" ]; then
        skip_prefix=true
    fi

    # Process each line of the message, preserving line breaks
    echo -e "$*" | while IFS= read -r line || [ -n "$line" ]; do
        if [ "$is_first_line" = true ]; then
            # The first line uses normal level prefix or skips the prefix
            if [ "$skip_prefix" = true ]; then
                # If previous output used -n and has the same log level, output directly without prefix
                printf "%s" "$line" >&2
            elif [ "$nonewline" = true ]; then
                printf "%s %s%s" "$level" "$indent_str" "$line" >&2
            else
                printf "%s %s%s\n" "$level" "$indent_str" "$line" >&2
            fi
            is_first_line=false
        else
            # Subsequent lines use connecting lines and maintain the same indentation as the first line
            if [ "$nonewline" = true ] && [ -z "$line" ]; then
                # Don't output anything
                :
            elif [ "$nonewline" = true ]; then
                printf "\n%s %s%s" "$continuation_prefix" "$indent_str" "$line" >&2
            else
                printf "%s %s%s\n" "$continuation_prefix" "$indent_str" "$line" >&2
            fi
        fi
    done

    # Record the status of this log for next log output decision
    PREVIOUS_LOG_NONEWLINE=$nonewline
    PREVIOUS_LOG_LEVEL=$level
}
# Increase/decrease indentation level
log_indent_increase() { export LOG_INDENT=$((${LOG_INDENT:-0} + 2)); }
log_indent_decrease() {
    export LOG_INDENT=$((${LOG_INDENT:-0} > 2 ? LOG_INDENT - 2 : 0))
}
# Log functions - redirect all output to stderr to avoid interfering with function return values
# Define log output functions, supporting different levels
log_message_by_level() {
    local level=$1
    local min_level=$2
    local nonewline=$3
    shift 3

    [ "$LOG_LEVEL" -ge "$min_level" ] && log_message "$level" ${nonewline:+"-n"} "$@"
}
log_error() { log_message "[Error]" "$@"; }
log_info() { log_message_by_level "[Info]" 1 "" "$@"; }
log_debug() { log_message_by_level "[Debug]" 2 "" "$@"; }
log_info_n() { log_message_by_level "[Info]" 1 "nonewline" "$@"; }
log_debug_n() { log_message_by_level "[Debug]" 2 "nonewline" "$@"; }
