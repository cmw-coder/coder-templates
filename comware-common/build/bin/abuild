#!/bin/bash

# Get configuration from environment variables, use defaults as fallback
JENKINS_API_TOKEN=${JENKINS_API_TOKEN:-"11c7798a2446cc8acb1f871ad486a4b8ff"}    # This should be set automatically
JENKINS_SERVER_URL=${JENKINS_SERVER_URL:-"http://10.153.3.174:8080"}            # This should be set automatically
PROJECT_PLATFORM_FOLDER_LIST=${PROJECT_PLATFORM_FOLDER_LIST:-""}                # This should be set automatically

# shellcheck source=/dev/null
source "log-utils"

# Display help information
show_help() {
    echo "Usage: abuild [options] <-e> <ipe_package_name>"
    echo ""
    echo "Options:"
    echo "  -e, --ipe-package <name>        Specify the IPE package name, e.g., 64sim9cen (required)"
    echo "  -f, --folder <folder_list>      Specify to only build the folder list, e.g., ospf,nqa"
    echo "  -i, --input-lib <lib_path>      Specify the library path to use, e.g., /path/to/lib"
    echo "  -r, --release                   Build in release mode (default is debug)"
    echo ""
    echo "Examples:"
    echo "  abuild -e 64sim9cen"
    echo "  abuild -e 64sim9cen,64sim9dis -r"
    echo "  abuild -e 64sim9cen,64sim9dis -i /path/to/lib"
    echo ""
    echo "Configurable Environment Variables:"
    echo "  Current script:"
    echo "    JENKINS_API_TOKEN             Jenkins API token, default is 117b0fdde578a988ec1be741dd777c1a1c"
    echo "    JENKINS_SERVER_URL            Jenkins server URL, default is http://10.153.3.174:8080"
    echo "    PROJECT_PLATFORM_FOLDER_LIST      Project platform folder list (JSON array), this should be set automatically"
    echo ""
    echo "  Inherited from log-utils:"
    echo "    LOG_LEVEL                     Log level, 0=error, 1=info, 2=debug, default is 1"
}

# Main function
main() {
    local module_list
    local ipe_package_name
    local extra_params
    while [ $# -gt 0 ]; do
        case $1 in
        -e | --ipe-package)
            if [ -z "$2" ]; then
                log_error "IPE package name is required after -e or --ipe-package"
                show_help
                return 1
            fi
            ipe_package_name="$2"
            shift 2
            ;;
        --help)
            show_help
            return 0
            ;;
        --modules)
            if [ -z "$2" ]; then
                log_error "Module list is required when using --modules option"
                show_help
                return 1
            fi
            module_list="$2"
            shift 2
            ;;
        *)
            extra_params="$extra_params $1"
            shift
            ;;
        esac
    done

    if [ -z "$ipe_package_name" ]; then
        log_error "IPE package name is required, please specify it with -e or --ipe-package"
        show_help
        return 1
    fi

    if [ -z "$PROJECT_PLATFORM_FOLDER_LIST" ]; then
        log_error "PROJECT_PLATFORM_FOLDER_LIST is not set, please set it to the platform folder list"
        return 1
    fi

    if [ -z "$module_list" ]; then
        module_list=$(echo "$PROJECT_PLATFORM_FOLDER_LIST" | tr -d '[]"')
    fi

    # shellcheck source=/dev/null
    source build-job --type abuild --modules "$module_list" -e "$ipe_package_name" "$extra_params"
}

# Execute main function
main "$@"
